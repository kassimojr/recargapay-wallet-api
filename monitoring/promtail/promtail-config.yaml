server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Coleta logs estruturados JSON da API Wallet
  - job_name: wallet-api-json-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: wallet-api
          service: wallet-api
          format: json
          __path__: /app/logs/wallet-api*.json
    pipeline_stages:
      # Extrai campos do JSON principal
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            logger: logger
            thread: thread
            application: application
            environment: environment
            traceId: traceId
            spanId: spanId
            operation: operation
            status: status
            walletId: walletId
      
      # Extrai operation do JSON aninhado usando regex (fallback para logs que não têm no MDC)
      - regex:
          expression: '"operation":"(?P<nested_operation>[^"]*)"'
          source: message
      
      # Extrai status do JSON aninhado usando regex (fallback)
      - regex:
          expression: '"status":"(?P<nested_status>[^"]*)"'
          source: message
      
      # Extrai walletId do JSON aninhado usando regex (fallback)
      - regex:
          expression: '"walletId":"(?P<nested_walletId>[^"]*)"'
          source: message
          
      # Use nested values as fallback if main fields are empty
      - template:
          source: operation
          template: '{{ if .operation }}{{ .operation }}{{ else }}{{ .nested_operation }}{{ end }}'
      - template:
          source: status
          template: '{{ if .status }}{{ .status }}{{ else }}{{ .nested_status }}{{ end }}'
      - template:
          source: walletId
          template: '{{ if .walletId }}{{ .walletId }}{{ else }}{{ .nested_walletId }}{{ end }}'
          
      # Extrai timestamp para ordenação correta
      - timestamp:
          source: timestamp
          format: RFC3339Nano
      
      # Adiciona labels com baixa cardinalidade apenas (evita traceId, spanId, walletId como labels)
      - labels:
          level:
          logger:
          service:
          environment:
          operation:
          status:
          
      # Ensure all fields are available for filtering and display
      - output:
          source: output
          
      # Add extracted fields to the log entry for better visualization in Grafana
      - template:
          source: output
          template: |
            {{ .timestamp }} {{ .level }} {{ .logger }} {{ if .operation }}[{{ .operation }}{{ if .status }}/{{ .status }}{{ end }}] {{ end }}{{ .message }}

  # Coleta logs de arquivos da API Wallet
  - job_name: wallet-api-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: wallet-api
          service: wallet-api
          __path__: /var/log/wallet-api/*log

  # Coleta logs do stdout dos containers Docker
  - job_name: docker-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["logging=promtail"]
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container'
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'logstream'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'service'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_project']
        target_label: 'app'
